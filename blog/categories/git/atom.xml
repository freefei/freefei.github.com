<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Ryan Hoo]]></title>
  <link href="http://ryanhoo.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://ryanhoo.github.io/"/>
  <updated>2014-12-17T20:56:47+08:00</updated>
  <id>http://ryanhoo.github.io/</id>
  <author>
    <name><![CDATA[Ryan Hoo]]></name>
    <email><![CDATA[ryan.hoo.j@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[有 Github 帐号 ≠ Github]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/10/16/why-and-how-to-use-github/"/>
    <updated>2014-10-16T17:58:51+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/10/16/why-and-how-to-use-github</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">这是一个误会</a></li>
  <li><a href="#markdown">Markdown</a></li>
  <li><a href="#git">你真的会用 Git?</a>    <ul>
      <li><a href="#rebase-">rebase 是什么东西？好吃吗？</a></li>
      <li><a href="#reset---hard-">不小心 reset –hard 了，代码全没了！</a></li>
      <li><a href="#merge-">merge 之外，另有一番天地</a></li>
    </ul>
  </li>
  <li><a href="#commit-message">好好写 commit message!</a></li>
  <li><a href="#github-">分享与协作 —— Github 之真义</a></li>
</ul>

<blockquote>
  <p>原文来自我在 Segmentfault 的回答：</p>

  <p><a href="http://segmentfault.com/q/1010000000725223/a-1020000000725816">GitHub 应该放什么类型的代码?</a></p>
</blockquote>

<h2 id="section">这是一个误会</h2>

<p>我想，现在很多程序员都对 Github 存在误解。</p>

<p>大多都是觉得『虽不明，但觉厉』的样子，以为有个 Github 帐号就算是世界级的程序员了。</p>

<p>由于公司招聘有 Github <strong>加分</strong>，所以很多人都把 Git 地址贴过去，然后就这样：</p>

<p><img src="/images/blog/android/c47b3d83f68acc5f3be155bc48482461.png" alt="空无一物的 Github" /></p>

<p>其中不乏工作 <strong>5</strong> 年以上的，煞有介事的把 <strong>空无一物</strong> 的 Github 地址粘贴过去。
个人来说，我要看应聘者的 Github，就是看你</p>

<ul>
  <li>做了什么项目</li>
  <li>编码风格如何</li>
  <li>能不能用 Git 做好版本控制</li>
  <li>commit message 写得怎么样</li>
  <li>工程管理习惯</li>
  <li>等等</li>
</ul>

<p>从一个小地方能看出很多东西，我想如果 10 来分钟就能大致了解一个人的水平如何，不是能很好的节省招聘成本，为双方省时间么？</p>

<h2 id="markdown">Markdown</h2>

<p>现在有很多工作 <strong>5</strong> 年以上的程序员，<code>Markdown</code> 都不会好好写（我不仇视也不鄙视这样的人，因为都是可以学的）。Github 一个仓库下来总要写个 <code>README.md</code> 的吧？<code>README.md</code> 也能告诉我很多信息：</p>

<ul>
  <li><code>Markdown</code> 水平不说</li>
  <li>文档的编写风格决定了我能不能跟 TA 做朋友（无所谓的态度、乱糟糟的文档，我不喜欢这样的程序员，哪怕他水平比我高很多，团队协作的时候他会不在乎很多东西）</li>
  <li>把合作对象当做用户来友好对待（一个好的 <code>README.md</code> 能让别人省很多事情，同样，一个清晰明了的文档能让 coworker 少很多愚蠢的问题）</li>
</ul>

<h2 id="git">你真的会用 Git?</h2>

<p>很久之前，我还是个无知的菜鸟的时候（当然我现在也很弱，但我知道自己是无知的），我恐惧 CLI（命令行），依赖 GUI（图形工具，IDE 自带），然后<code>勾选修改</code> -&gt; <code>commit</code> -&gt; <code>pull</code> -&gt; <code>merge</code> -&gt; <code>checkout</code>，大概就这么多了，这都没有问题的，好歹能用上版本控制了不是？</p>

<p>但是我想用 GUI 的人，多多少少没有良好的 Git 使用习惯，<code>conflict</code> 处理粗暴简单，不管提交能不能 <code>Fast forward</code>，提交就是了，<code>merge develop from xxxx.com into develop</code>这种粗暴的 <code>merge</code>？没关系，TA 不在意。</p>

<p>Git 的学习曲线确实相对陡峭，除了基础的哲学理念让人糊涂，Git 很多陷阱难以轻易的复现，学习起来非常痛苦，它简洁，却又晦涩难懂。你用 <code>git add | git commit | git push | git pull | git merge</code> 觉得已经够了，等到你做了一些让队友恨得牙痒痒的事情的时候，你发现那几条单薄的命令只会让你难堪。</p>

<h3 id="rebase-">rebase 是什么东西？好吃吗？</h3>

<p>没有学会用 rebase，就别出去跟人说会用 Git 了。Git <code>merge</code> 合并让你觉得成就感爆棚，但是看看别人是如何优雅的使用 <code>rebase</code> 衍合分支的，心里总归有点儿羡慕吧。</p>

<h3 id="reset---hard-">不小心 reset –hard 了，代码全没了！</h3>

<p>与其哭着重新写一遍，不如了解下 Git <code>DVCS</code> 是用来干嘛的。
<code>git reflog</code> 找到自己的提交记录，<code>git cherry-pick [commit hash code]</code>，喏，代码还在呢。</p>

<h3 id="merge-">merge 之外，另有一番天地</h3>

<p><code>git rebase --onto</code>
<code>git rebase -i</code>
等到基础差不多了，玩玩这两条命令吧。</p>

<h2 id="commit-message">好好写 commit message!</h2>

<p>相信这样的 commit message 不少见：</p>

<ul>
  <li>init</li>
  <li>update</li>
  <li>merge</li>
  <li>chore</li>
  <li>提交</li>
  <li>解决了一些问题</li>
  <li>增加了一些功能</li>
</ul>

<p>我去，大神你写这样的 commit message 给鬼看啊？<code>git log</code> 你看看都是写的是些什么，我真不指望你看着 commit 时间戳就能知道那天你干了什么。</p>

<p>看看别人怎么写的吧：</p>

<ul>
  <li><code>feat(超文本驱动和资源发现): 增加了 JSON API 方案</code></li>
  <li><code>fix(请求方法): 更新完资源后应该返回状态码 202</code></li>
  <li><code>chore(): 增加了补充性质的文件 SUPPLEMENT.md</code></li>
</ul>

<p>诶，是不看起来是 <code>readable</code> 了？</p>

<h2 id="github-">分享与协作 —— Github 之真义</h2>

<p>Git 不是看两本书就能立地成牛了，是要在日常版本管理与协作中锻炼出来的。</p>

<p>没事给自己经常用的第三方库提几个 <code>issue</code>，改几个 bug 写几行代码，然后提起 <code>pull request</code>。</p>

<p>同样的，自己有个好的 idea 也可以写个框架提交在上去，广邀四方英雄来参与你的项目。</p>

<p>这里其实有很多要说的，却发现什么也说不出来了。</p>

<p>哦，忘记重点了，不要怕初级太简单而被人鄙视，谁都是这么过来的。</p>

<p>另外也别光说不练，贴上我的 <a href="https://github.com/ryanhoo">Github</a>，其实还有很多改善的地方。如前面所说：我知道自己无知，我在努力。;-)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git 从其它分支提取指定文件]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/07/11/checkout-files-from-another-branch/"/>
    <updated>2014-07-11T11:38:28+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/07/11/checkout-files-from-another-branch</id>
    <content type="html"><![CDATA[<p>在 Git 多个分支之间，使用 <strong>merge</strong> 或者 <strong>rebase</strong> 可以合并分支内容，非常方便，但是在特殊情况下，我需要从另外一个分支拉取一个或者某个指定的文件(夹)，手动 copy 代码当然可以，但是身为大程序猿，何须做这么接地气的事情？使用 <code>git checkout</code> 就可以轻松做到。</p>

<h2 id="section">应用场景</h2>

<h3 id="a">A</h3>

<p>我在 feature/A 分支下工作，在即将完成的时候，接到 PM 老爷的通知，这个功能要大改，基本就报废了。重新开一个 branch ，发现新需求下，model 定义还是一样的，而我只需要 model 下那几个文件。</p>

<h3 id="b">B</h3>

<p>前几日用 NDK ，编译 .so 文件的时候，不知道什么问题，将 armeabi 目录下其它的 .so 文件都删除掉了，看到 git commit message 里提示删除，但是项目跑通没问题，当时就没在意。过了两天测试发现地图老是 crash ，发现了原因那就好办了~</p>

<p>不过万一其它分支也没有这个文件肿么办？不要紧，<code>git reset --hard [delete commit hashcode]</code> 历史回溯到那个删除的节点，然后 在那个节点 folk 一个新分支，再将当前分支更新 <code>git reset  --hard origin/[remote branch]</code> ，在按照上面提到的思路执行就 ok 了。</p>

<h2 id="section-1">从其它分支提取文件</h2>

<p><code>
git checkout [branch] -- [file name]
</code></p>
]]></content>
  </entry>
  
</feed>
