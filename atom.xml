<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Ryan Hoo]]></title>
  <link href="http://ryanhoo.github.io/atom.xml" rel="self"/>
  <link href="http://ryanhoo.github.io/"/>
  <updated>2014-06-26T21:34:15+08:00</updated>
  <id>http://ryanhoo.github.io/</id>
  <author>
    <name><![CDATA[Ryan Hoo]]></name>
    <email><![CDATA[ryan.hoo.j@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Timer(Task) ？ Not in Android ！]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/06/26/do-not-use-timer-in-android/"/>
    <updated>2014-06-26T20:55:04+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/06/26/do-not-use-timer-in-android</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">前言</a></li>
  <li><a href="#section-1">解决方案</a>    <ul>
      <li><a href="#timer">Timer</a></li>
      <li><a href="#timertask">TimerTask</a></li>
      <li><a href="#section-2">操作定时任务</a></li>
    </ul>
  </li>
  <li><a href="#section-3">参考</a></li>
</ul>

<h2 id="section">前言</h2>

<p>我们对于 <code>java.util.Timer(Task)</code> 这两个类可谓不陌生，定时任务处处可见它俩如胶似漆的背影。只是，有心人必定会发现在 <strong>Android UI</strong> 中使用，它们带来的麻烦远远大于便利。</p>

<p>我在多个场景碰到过这个问题，往往是忍气吞声，不厌其烦的处理着它们的『身后事』，还得提防它们时而罢工的臭毛病。</p>

<h2 id="section-1">解决方案</h2>

<p>其实使用 Android 自己的 <a href="https://developer.android.com/reference/android/os/Handler.html">Handler</a> 就可以解决这个问题。而且有如下优点：</p>

<ul>
  <li>重用</li>
</ul>

<p>可以很好的重用我们的定时任务，而以往使用 <code>Timer(Task)</code> ，我们不得不销毁，再 <code>new Timer(Task)</code>，不得不说是一种很粗鲁的方式。</p>

<ul>
  <li>可控性</li>
</ul>

<p><code>Timer(Task)</code> 的组合更像是离弦之箭，不能收发自如。而使用 <code>Handler</code> 的方式，调用 <code>removeCallbacks</code> 即可轻松暂停或者重置任务。</p>

<h3 id="timer">Timer</h3>

<p>使用 <a href="https://developer.android.com/reference/android/os/Handler.html">Handler</a> 来替代 <a href="https://developer.android.com/reference/java/util/Timer.html">Timer</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Handler</span> <span class="n">timerHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Handler</span><span class="o">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="timertask">TimerTask</h3>

<p>简单可重用的 <code>Runnable</code> ，用来执行定时任务，但是这里是用的比较 <strong>Hack</strong> 的方式来实现循环的 Timer 功能的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">CustomTimerTask</span> <span class="kd">implements</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class="line">    <span class="nd">@Override</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="c1">// scheduled tasks</span>
</span><span class="line">
</span><span class="line">        <span class="c1">// relaunch the task</span>
</span><span class="line">        <span class="n">timerHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">TIME_INTERVAL</span><span class="o">);</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">操作定时任务</h3>

<p>我们可以轻松的启动或者停止这个定时任务。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">timerHandler</span><span class="o">.</span><span class="na">postDelayed</span><span class="o">(</span><span class="k">new</span> <span class="n">CustomTimerTask</span><span class="o">(),</span> <span class="n">TIME_INTERVAL</span><span class="o">);</span> <span class="c1">// launch the task</span>
</span><span class="line"><span class="n">timerHandler</span><span class="o">.</span><span class="na">removeCallbacks</span><span class="o">(</span><span class="n">timerTask</span><span class="o">);</span>	<span class="c1">// stop it</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-3">参考</h2>

<p><a href="http://www.mopri.de/2010/timertask-bad-do-it-the-android-way-use-a-handler/">Timer(Task) = bad! Do it the Android way: Use a Handler :)</a></p>

<p><a href="http://docs.huihoo.com/android/2.1/resources/articles/timed-ui-updates.html">Updating the UI from a Timer</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【构建Android缓存模块】（三）Controller & 异步图片加载]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/06/17/build-android-cache-module-3/"/>
    <updated>2014-06-17T15:48:38+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/06/17/build-android-cache-module-3</id>
    <content type="html"><![CDATA[<p>上一篇博客我们学习了缓存模块的实现， 缓存分做两份：<code>Memory Cache</code>和<code>File Cache</code>。方法也很简单，分别是：</p>

<ul>
  <li>存储文件</li>
  <li>按唯一key值索引文件</li>
  <li>清空缓存</li>
</ul>

<p>区别在于内存缓存读取优先，因为它读写的速度更快。但是考虑到内存限制，退而选用文件存储，分担内存缓存的压力。</p>

<p>原理非常简单，在第一课中已经详细分析了。那么要怎么才能将这个缓存模块与UI模块的显示关联起来呢？在这里我们需要一个控制器，掌管数据流向和读写，同时控制UI的显示。</p>

<p>那么这个控制器需要以下的元素：</p>

<ul>
  <li>内存缓存</li>
  <li>硬盘缓存</li>
  <li>异步任务处理</li>
  <li>控制UI显示</li>
</ul>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="c1">//caches</span>
</span><span class="line"><span class="kd">private</span> <span class="n">MemoryCache</span> <span class="n">memoryCache</span><span class="o">;</span>
</span><span class="line"><span class="kd">private</span> <span class="n">FileCache</span> <span class="n">fileCache</span><span class="o">;</span>
</span><span class="line"><span class="c1">//Asynchronous task</span>
</span><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="n">AsyncImageLoader</span> <span class="n">imageLoader</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>Memory Cache</code>和<code>File Cache</code>在上一课中有具体的实现，这里有一个异步的任务处理器—— <code>AsyncImageDownloader</code>，它用来在后台下载数据，完成下载后存储数据到缓存中，并更新UI的显示 。让我们来看看它是如何实现的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">class</span> <span class="nc">AsyncImageDownloader</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;{</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">public</span> <span class="nf">AsyncImageDownloader</span><span class="o">(</span><span class="n">ImageView</span> <span class="n">imageView</span><span class="o">,</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">){</span>
</span><span class="line">		<span class="k">this</span><span class="o">.</span><span class="na">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class="line">		<span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPreExecute</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="kd">super</span><span class="o">.</span><span class="na">onPreExecute</span><span class="o">();</span>
</span><span class="line">		<span class="n">imageView</span><span class="o">.</span><span class="na">setImageResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">placeholder</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">protected</span> <span class="n">Bitmap</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getRealUrlOfPicture</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
</span><span class="line">		<span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpRetriever</span><span class="o">().</span><span class="na">requestGet</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line">		<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;url: &quot;</span> <span class="o">+</span> <span class="n">url</span><span class="o">);</span>
</span><span class="line">		<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;respone: &quot;</span> <span class="o">+</span> <span class="n">response</span><span class="o">);</span>
</span><span class="line">		<span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="k">try</span> <span class="o">{</span>
</span><span class="line">			<span class="k">if</span><span class="o">(</span><span class="n">response</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">				<span class="n">in</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">().</span><span class="na">getContent</span><span class="o">();</span>
</span><span class="line">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalStateException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">			<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">			<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		
</span><span class="line">		<span class="c1">//TODO to be optimized: adjust the size of bitmap</span>
</span><span class="line">		<span class="k">return</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="nd">@Override</span>
</span><span class="line">	<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">imageView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">			<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">		<span class="c1">//TODO cache the bitmap both in sdcard &amp; memory</span>
</span><span class="line">		<span class="n">memoryCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span><span class="c1">// key is a unique token, value is the bitmap</span>
</span><span class="line">		
</span><span class="line">		<span class="n">fileCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到这个类的构造函数需要两个参数，分别是文件名和对应要显示的<code>ImageView</code>，那么在任务开始的时候，可以为该<code>ImageView</code>设置未下载状态的图片，然后下载完成后更新UI。</p>

<blockquote>
  <p>注：需要提醒的是，这里的唯一key值，我使用的是文件名，因为我接收到的文件名是唯一的。猿媛们也可以根据自己的需求，设计自己的唯一key值算法。</p>
</blockquote>

<p>接下来，我们需要读用<code>key</code>值索引相应的<code>Bitmap</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="n">Bitmap</span> <span class="nf">getBitmap</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">){</span>
</span><span class="line">	<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="c1">//1. search memory</span>
</span><span class="line">	<span class="n">bitmap</span> <span class="o">=</span> <span class="n">memoryCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">//2. search sdcard</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">		<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">fileCache</span><span class="o">.</span><span class="na">getFile</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">file</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">			<span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapHelper</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>到这里，一个简单的缓存框架就搭建成功了。它简洁有效，但是非常单薄，似乎不够强大，需要你们根据自己的需求进行修改。另外它本来的目的就是用于演示，理解这个以后，我们再来看<code>Google</code>的<code>BitmapFun</code>。</p>

<p>不过，我将它应用在一个小项目中，性能还不错。对于小项目的需求，应该是够的。</p>

<p>最后，附上使用方法，以及整个类的代码。</p>

<h2 id="section">使用</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">AsyncImageLoader</span> <span class="n">imageLoader</span> <span class="o">=</span> <span class="n">AsyncImageLoader</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="k">this</span><span class="o">);</span><span class="err">、</span>
</span><span class="line"><span class="n">imageLoader</span><span class="o">.</span><span class="na">displayBitmap</span><span class="o">(</span><span class="n">imageView</span><span class="o">,</span> <span class="n">fileName</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="asyncimageloader">AsyncImageLoader</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
<span class="line-number">98</span>
<span class="line-number">99</span>
<span class="line-number">100</span>
<span class="line-number">101</span>
<span class="line-number">102</span>
<span class="line-number">103</span>
<span class="line-number">104</span>
<span class="line-number">105</span>
<span class="line-number">106</span>
<span class="line-number">107</span>
<span class="line-number">108</span>
<span class="line-number">109</span>
<span class="line-number">110</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AsyncImageLoader</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;AsyncImageLoader&quot;</span><span class="o">;</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">//caches</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">MemoryCache</span> <span class="n">memoryCache</span><span class="o">;</span>
</span><span class="line">	<span class="kd">private</span> <span class="n">FileCache</span> <span class="n">fileCache</span><span class="o">;</span>
</span><span class="line">	<span class="c1">//Asynchronous task</span>
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="n">AsyncImageLoader</span> <span class="n">imageLoader</span><span class="o">;</span>
</span><span class="line">
</span><span class="line">	<span class="kd">class</span> <span class="nc">AsyncImageDownloader</span> <span class="kd">extends</span> <span class="n">AsyncTask</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">,</span> <span class="n">Void</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;{</span>
</span><span class="line">		<span class="kd">private</span> <span class="n">ImageView</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class="line">		<span class="kd">private</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">		
</span><span class="line">		<span class="kd">public</span> <span class="nf">AsyncImageDownloader</span><span class="o">(</span><span class="n">ImageView</span> <span class="n">imageView</span><span class="o">,</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">){</span>
</span><span class="line">			<span class="k">this</span><span class="o">.</span><span class="na">imageView</span> <span class="o">=</span> <span class="n">imageView</span><span class="o">;</span>
</span><span class="line">			<span class="k">this</span><span class="o">.</span><span class="na">fileName</span> <span class="o">=</span> <span class="n">fileName</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		
</span><span class="line">		<span class="nd">@Override</span>
</span><span class="line">		<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPreExecute</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">			<span class="kd">super</span><span class="o">.</span><span class="na">onPreExecute</span><span class="o">();</span>
</span><span class="line">			<span class="n">imageView</span><span class="o">.</span><span class="na">setImageResource</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">placeholder</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		
</span><span class="line">		<span class="nd">@Override</span>
</span><span class="line">		<span class="kd">protected</span> <span class="n">Bitmap</span> <span class="nf">doInBackground</span><span class="o">(</span><span class="n">Void</span><span class="o">...</span> <span class="n">arg0</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">			<span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">Utils</span><span class="o">.</span><span class="na">getRealUrlOfPicture</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
</span><span class="line">			<span class="n">HttpResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HttpRetriever</span><span class="o">().</span><span class="na">requestGet</span><span class="o">(</span><span class="n">url</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;url: &quot;</span> <span class="o">+</span> <span class="n">url</span><span class="o">);</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;respone: &quot;</span> <span class="o">+</span> <span class="n">response</span><span class="o">);</span>
</span><span class="line">			<span class="n">InputStream</span> <span class="n">in</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">			<span class="k">try</span> <span class="o">{</span>
</span><span class="line">				<span class="k">if</span><span class="o">(</span><span class="n">response</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">					<span class="n">in</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getEntity</span><span class="o">().</span><span class="na">getContent</span><span class="o">();</span>
</span><span class="line">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalStateException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">				<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">				<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">			
</span><span class="line">			<span class="c1">//TODO to be optimized: adjust the size of bitmap</span>
</span><span class="line">			<span class="k">return</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeStream</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		
</span><span class="line">		<span class="nd">@Override</span>
</span><span class="line">		<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">onPostExecute</span><span class="o">(</span><span class="n">Bitmap</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">			<span class="kd">super</span><span class="o">.</span><span class="na">onPostExecute</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class="line">			<span class="k">if</span><span class="o">(</span><span class="n">result</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">imageView</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">				<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
</span><span class="line">			
</span><span class="line">			<span class="c1">//TODO cache the bitmap both in sdcard &amp; memory</span>
</span><span class="line">			<span class="n">memoryCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span><span class="c1">// key is a unique token, value is the bitmap</span>
</span><span class="line">			
</span><span class="line">			<span class="n">fileCache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">fileName</span><span class="o">,</span> <span class="n">result</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">private</span> <span class="nf">AsyncImageLoader</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">){</span>
</span><span class="line">		<span class="k">this</span><span class="o">.</span><span class="na">memoryCache</span> 		<span class="o">=</span> 	<span class="k">new</span> <span class="n">MemoryCache</span><span class="o">();</span>
</span><span class="line">		<span class="k">this</span><span class="o">.</span><span class="na">fileCache</span>			<span class="o">=</span> 	<span class="k">new</span> <span class="n">FileCache</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">public</span> <span class="kd">static</span> <span class="n">AsyncImageLoader</span> <span class="nf">getInstance</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">){</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">imageLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">			<span class="n">imageLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">AsyncImageLoader</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">		<span class="k">return</span> <span class="n">imageLoader</span><span class="o">;</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">displayBitmap</span><span class="o">(</span><span class="n">ImageView</span> <span class="n">imageView</span><span class="o">,</span> <span class="n">String</span> <span class="n">fileName</span><span class="o">){</span>
</span><span class="line">		<span class="c1">//no pic for this item</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">fileName</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">fileName</span><span class="o">))</span>
</span><span class="line">			<span class="k">return</span><span class="o">;</span>
</span><span class="line">		
</span><span class="line">		<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">getBitmap</span><span class="o">(</span><span class="n">fileName</span><span class="o">);</span>
</span><span class="line">		<span class="c1">//search in cache, if there is no such bitmap, launch downloads</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">bitmap</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">			<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		<span class="k">else</span><span class="o">{</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Can&#39;t find the file you required.&quot;</span><span class="o">);</span>
</span><span class="line">			<span class="k">new</span> <span class="nf">AsyncImageDownloader</span><span class="o">(</span><span class="n">imageView</span><span class="o">,</span> <span class="n">fileName</span><span class="o">).</span><span class="na">execute</span><span class="o">();</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">public</span> <span class="n">Bitmap</span> <span class="nf">getBitmap</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">){</span>
</span><span class="line">		<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">		<span class="c1">//1. search memory</span>
</span><span class="line">		<span class="n">bitmap</span> <span class="o">=</span> <span class="n">memoryCache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">		<span class="c1">//2. search sdcard</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">			<span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">fileCache</span><span class="o">.</span><span class="na">getFile</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">			<span class="k">if</span><span class="o">(</span><span class="n">file</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">				<span class="n">bitmap</span> <span class="o">=</span> <span class="n">BitmapHelper</span><span class="o">.</span><span class="na">decodeFile</span><span class="o">(</span><span class="n">file</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">		
</span><span class="line">		<span class="k">return</span> <span class="n">bitmap</span><span class="o">;</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearCache</span><span class="o">(){</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">memoryCache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">			<span class="n">memoryCache</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">fileCache</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">			<span class="n">fileCache</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">源码</h2>

<p>附上源码，不过服务器的源码暂时还没有放出来，先看看客户端的吧。</p>

<p><a href="https://github.com/ryanhoo/SoftRead">https://github.com/ryanhoo/SoftRead</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【构建Android缓存模块】（二）Memory Cache & File Cache]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/06/05/build-android-cache-module-2/"/>
    <updated>2014-06-05T23:34:36+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/06/05/build-android-cache-module-2</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#memory-cache">Memory Cache</a></li>
  <li><a href="#file-cache">File Cache</a></li>
</ul>

<p>上一篇博客我们讲到普通应用缓存Bitmap的实现分析，根据 MVC 的实现原理，我将这个简单的缓存实现单独写成一个模块，这样可以方便以后的使用，对于任意的需求，都属于一个可插拔式的功能。</p>

<p>之前提到，这个缓存模块主要有两个子部件：</p>

<h2 id="memory-cache">Memory Cache</h2>

<p>内存缓存的存取速度非常惊人，远远快于文件读取，如果没有内存限制，当然首选这种方式。遗憾的是我们有着<strong>16M</strong>的限制（当然大多数设备限制要高于 Android 官方说的这个数字），这也正是大 Bitmap容易引起 OOM 的原因。Memory Cache 将使用 <code>WeakHashMap</code> 作为缓存的中枢，当程序内存告急时，它会主动清理部分弱引用（因此，当引用指向为 null ，我们必须转向硬盘缓存读取数据，如果硬盘也没有，那还是重新下载吧）。</p>

<p>能力越大，责任越大？人家只是跑得快了点儿，总得让人家休息，我们一定不希望让内存成为第一位跑完马拉松的 Pheidippides ，一次以后就挂了吧？作为精打细算的猿媛，我们只能将有限的内存分配给 Memory Cache ，将更繁重的任务托付给任劳任怨的 SDCard 。</p>

<h2 id="file-cache">File Cache</h2>

<p>硬盘读取速度当然不如内存，但是为了珍惜宝贵的流量，不让你的用户在月底没有流量时嚎叫着要删掉你开发的“流量杀手”，最好是避免重复下载。在第一次下载以后，将数据保存在本地即可。</p>

<p>文件读写的技术并不是很新颖的技术，Java Core 那点儿就够你用了。不过要记得我们可是将Bitmap写入文件啊，怎么写入呢？不用着急，Android 的 Bitmap 本身就具备将数据写入 OutputStream 的能力。我将这些额外的方法写在一个帮助类中：BitmapHelper</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">saveBitmap</span><span class="o">(</span><span class="n">File</span> <span class="n">file</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">){</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">file</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">bitmap</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="k">try</span> <span class="o">{</span>
</span><span class="line">		<span class="n">BufferedOutputStream</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedOutputStream</span><span class="o">(</span><span class="k">new</span> <span class="n">FileOutputStream</span><span class="o">(</span><span class="n">file</span><span class="o">));</span>
</span><span class="line">		<span class="k">return</span> <span class="n">bitmap</span><span class="o">.</span><span class="na">compress</span><span class="o">(</span><span class="n">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">,</span> <span class="mi">100</span><span class="o">,</span> <span class="n">out</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">FileNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">		<span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后附上Memory Cache和File Cache的具体代码，非常简单。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryCache</span> <span class="o">{</span>
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MemoryCache&quot;</span><span class="o">;</span>
</span><span class="line">	
</span><span class="line">	<span class="c1">//WeakReference Map: key=string, value=Bitmap</span>
</span><span class="line">    <span class="kd">private</span> <span class="n">WeakHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;</span> <span class="n">cache</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WeakHashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">&gt;();</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Search the memory cache by a unique key. </span>
</span><span class="line"><span class="cm">     * @param key Should be unique. </span>
</span><span class="line"><span class="cm">     * @return The Bitmap object in memory cache corresponding to specific key.</span>
</span><span class="line"><span class="cm">     * */</span>
</span><span class="line">    <span class="kd">public</span> <span class="n">Bitmap</span> <span class="nf">get</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">){</span>
</span><span class="line">        <span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class="line">        	<span class="k">return</span> <span class="n">cache</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
</span><span class="line">        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * Put a bitmap into cache with a unique key.</span>
</span><span class="line"><span class="cm">     * @param key Should be unique.</span>
</span><span class="line"><span class="cm">     * @param value A bitmap.</span>
</span><span class="line"><span class="cm">     * */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">value</span><span class="o">){</span>
</span><span class="line">    	<span class="k">if</span><span class="o">(</span><span class="n">key</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">value</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">    		<span class="n">cache</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class="line">    		<span class="c1">//Log.i(TAG, &quot;cache bitmap: &quot; + key);</span>
</span><span class="line">    		<span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;size of memory cache: &quot;</span> <span class="o">+</span> <span class="n">cache</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>
</span><span class="line">    	<span class="o">}</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line">
</span><span class="line">    <span class="cm">/**</span>
</span><span class="line"><span class="cm">     * clear the memory cache.</span>
</span><span class="line"><span class="cm">     * */</span>
</span><span class="line">    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">        <span class="n">cache</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FileCache</span> <span class="o">{</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">TAG</span> <span class="o">=</span> <span class="s">&quot;MemoryCache&quot;</span><span class="o">;</span>
</span><span class="line">	
</span><span class="line">	<span class="kd">private</span> <span class="n">File</span> <span class="n">cacheDir</span><span class="o">;</span>	<span class="c1">//the directory to save images</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">	 * Constructor</span>
</span><span class="line"><span class="cm">	 * @param context The context related to this cache.</span>
</span><span class="line"><span class="cm">	 * */</span>
</span><span class="line">	<span class="kd">public</span> <span class="nf">FileCache</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="c1">// Find the directory to save cached images</span>
</span><span class="line">		<span class="k">if</span> <span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Environment</span><span class="o">.</span><span class="na">getExternalStorageState</span><span class="o">()</span>
</span><span class="line">				<span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Environment</span><span class="o">.</span><span class="na">MEDIA_MOUNTED</span><span class="o">))</span>
</span><span class="line">			<span class="n">cacheDir</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span>
</span><span class="line">					<span class="n">android</span><span class="o">.</span><span class="na">os</span><span class="o">.</span><span class="na">Environment</span><span class="o">.</span><span class="na">getExternalStorageDirectory</span><span class="o">(),</span>
</span><span class="line">					<span class="n">Config</span><span class="o">.</span><span class="na">CACHE_DIR</span><span class="o">);</span>
</span><span class="line">		<span class="k">else</span>
</span><span class="line">			<span class="n">cacheDir</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getCacheDir</span><span class="o">();</span>
</span><span class="line">		<span class="k">if</span> <span class="o">(!</span><span class="n">cacheDir</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span>
</span><span class="line">			<span class="n">cacheDir</span><span class="o">.</span><span class="na">mkdirs</span><span class="o">();</span>
</span><span class="line">		
</span><span class="line">		<span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;cache dir: &quot;</span> <span class="o">+</span> <span class="n">cacheDir</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">	 * Search the specific image file with a unique key.</span>
</span><span class="line"><span class="cm">	 * @param key Should be unique.</span>
</span><span class="line"><span class="cm">	 * @return Returns the image file corresponding to the key.</span>
</span><span class="line"><span class="cm">	 * */</span>
</span><span class="line">	<span class="kd">public</span> <span class="n">File</span> <span class="nf">getFile</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">		<span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">cacheDir</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class="line">		<span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">exists</span><span class="o">()){</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;the file you wanted exists &quot;</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class="line">			<span class="k">return</span> <span class="n">f</span><span class="o">;</span>
</span><span class="line">		<span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;the file you wanted does not exists: &quot;</span> <span class="o">+</span> <span class="n">f</span><span class="o">.</span><span class="na">getAbsolutePath</span><span class="o">());</span>
</span><span class="line">		<span class="o">}</span>
</span><span class="line">
</span><span class="line">		<span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">
</span><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">	 * Put a bitmap into cache with a unique key.</span>
</span><span class="line"><span class="cm">	 * @param key Should be unique.</span>
</span><span class="line"><span class="cm">	 * @param value A bitmap.</span>
</span><span class="line"><span class="cm">	 * */</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">put</span><span class="o">(</span><span class="n">String</span> <span class="n">key</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">value</span><span class="o">){</span>
</span><span class="line">		<span class="n">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="n">File</span><span class="o">(</span><span class="n">cacheDir</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
</span><span class="line">		<span class="k">if</span><span class="o">(!</span><span class="n">f</span><span class="o">.</span><span class="na">exists</span><span class="o">())</span>
</span><span class="line">			<span class="k">try</span> <span class="o">{</span>
</span><span class="line">				<span class="n">f</span><span class="o">.</span><span class="na">createNewFile</span><span class="o">();</span>
</span><span class="line">			<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">				<span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">			<span class="o">}</span>
</span><span class="line">		<span class="c1">//Use the util&#39;s function to save the bitmap.</span>
</span><span class="line">		<span class="k">if</span><span class="o">(</span><span class="n">BitmapHelper</span><span class="o">.</span><span class="na">saveBitmap</span><span class="o">(</span><span class="n">f</span><span class="o">,</span> <span class="n">value</span><span class="o">))</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Save file to sdcard successfully!&quot;</span><span class="o">);</span>
</span><span class="line">		<span class="k">else</span>
</span><span class="line">			<span class="n">Log</span><span class="o">.</span><span class="na">w</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;Save file to sdcard failed!&quot;</span><span class="o">);</span>
</span><span class="line">		
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	
</span><span class="line">	<span class="cm">/**</span>
</span><span class="line"><span class="cm">	 * Clear the cache directory on sdcard.</span>
</span><span class="line"><span class="cm">	 * */</span>
</span><span class="line">	<span class="kd">public</span> <span class="kt">void</span> <span class="nf">clear</span><span class="o">()</span> <span class="o">{</span>
</span><span class="line">		<span class="n">File</span><span class="o">[]</span> <span class="n">files</span> <span class="o">=</span> <span class="n">cacheDir</span><span class="o">.</span><span class="na">listFiles</span><span class="o">();</span>
</span><span class="line">		<span class="k">for</span> <span class="o">(</span><span class="n">File</span> <span class="n">f</span> <span class="o">:</span> <span class="n">files</span><span class="o">)</span>
</span><span class="line">			<span class="n">f</span><span class="o">.</span><span class="na">delete</span><span class="o">();</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>没什么难的地方，直接贴代码。下一篇博客我将讲解如何使用异步任务下载数据，以及使用Controller操作Model，控制View的显示。 </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【构建Android缓存模块】（一）吐槽与原理分析]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/06/04/build-android-cache-module-1/"/>
    <updated>2014-06-04T22:32:52+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/06/04/build-android-cache-module-1</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">摘要</a></li>
  <li><a href="#section-1">前言</a></li>
  <li><a href="#section-2">自力更生，构建自己的缓存模块</a></li>
  <li><a href="#oom">如何解决OOM</a></li>
  <li><a href="#section-3">佛说引用，既非引用，是名引用。</a></li>
  <li><a href="#section-4">原理示意图</a></li>
  <li><a href="#section-5">参考资料</a></li>
</ul>

<h2 id="section">摘要</h2>

<p>在我翻译的 <a href="http://my.oschina.net/ryanhoo/blog?catalog=260281">Google 官方系列教程</a>中，Bitmap 系列由浅入深地介绍了如何正确的解码 Bitmap ，异步线程操作以及使用 Fragments 重用等技术，并且在最后给出了非常强大的独家秘笈：<code>BitmapFun</code> ，让猿媛们得以一窥究竟 Google 的攻城师们是如何高屋建瓴地秒杀 <strong>OOM</strong> 的。</p>

<h2 id="section-1">前言</h2>

<p>在下载到 <a href="http://vdisk.weibo.com/s/hNgFB">BitmapFun.rar</a> 这个神圣的压缩包以后，我是双手颤抖，似乎是打开上古秘藏一般，心情激动导致久久不能自已。我还记得那天上海下着小雨，我当时霍然起身，伫立在 23 楼的窗台，仰着头向江水对岸的东方明珠望去，似乎这样我郁积已久的眼泪就不能掉下来。说到这里，Ryan 又暗自抹了一把眼泪。短暂地忘记了过去的黑暗时光，那一个漫长的被 <strong>OOM</strong> 的淫威所折磨的盛夏。。。</p>

<p>最后在 Boss诧异的目光中，我回到办公桌，按捺着内心汹涌的情绪波动，然后小心翼翼的打开 BitmapFun.rar 。当那些在洪荒时代就活跃在Android平台的大师们书写的篇章呈现在我眼前时，我的表情与阿宝从师父手里得到 <strong>Dragon Scroll</strong> 时一般，永久的定格在了极度天真的期待与眼角一抽一抽的状态。</p>

<p>那些泛黄的代码在我看去，通篇只有一句话：<code>老子看不懂！</code></p>

<h2 id="section-2">自力更生，构建自己的缓存模块</h2>

<p>Google 的这个 demo 堪称详尽，考虑极其周详，自然是极好的。但是当原理被层层的“特殊情况”包装起来，原本简单的例子变得异常复杂，几个类之间的关系错综复杂，堪比吸血鬼日记几个帅哥美女之间的关系。要理解清楚每一句代码的含义，你一定要有理解 Matt 那人老珠黄的老娘和他和失落的好朋友 Taylor 搞在一起的觉悟。</p>

<p>好了，吐槽一下就收，千万不要怀疑 Google ，人家已经仁至义尽了。 BitmapFun 中在下载后将 Bitmap 缓存起来，缓存做了两份：<code>LruCache</code> 和 <code>DiskLruCache</code> ，分别是内存缓存和硬盘缓存。此外两个至关重要的类是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">BitmapWorkerTask</span><span class="o">(</span><span class="n">ImageView</span> <span class="n">imageView</span><span class="o">)</span>
</span><span class="line">
</span><span class="line"><span class="n">AsyncDrawable</span> <span class="kd">extends</span> <span class="n">BitmapDrawable</span>
</span><span class="line">    <span class="nf">AsyncDrawable</span><span class="o">(</span><span class="n">Resources</span> <span class="n">res</span><span class="o">,</span> <span class="n">Bitmap</span> <span class="n">bitmap</span><span class="o">,</span><span class="n">BitmapWorkerTask</span> <span class="n">bitmapWorkerTask</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>BitmapWorkerTask</code> 持有一个 <code>WeakReference&lt;ImageView&gt; imageViewReference</code> ，弱引用 <code>ImageView</code> ，用作异步处理加载图片的任务。
<code>AsyncDrawable</code> 巧妙的引用持有弱引用 <code>WeakReference&lt;BitmapWorkerTask&gt; bitmapWorkerTaskReference</code> ，是 <code>BitmapDrawable</code> 的子类，这样就可以 <code>setImageBitmap(AsyncDrawable)</code>。</p>

<p>关系：<code>AsyncDrawable</code> 中弱引用 <code>BitmapWorkerTask</code> 。其实是图片引用 <code>ImageView</code> 的关系，而<code>ImageView.getDrawable</code> 又可以获得图片。这种高妙的思想不是正值得我们学习么？   </p>

<p>当然，这节课并不是讲解官方Demo的，在讲解它之前，我们先来学习一个更加简单的缓存实现方案，使用最简单的方式快速构建自己应用的缓存模块，有效避免 OOM 异常。它的难度非常小也很方便理解，可以在这个缓存实现的基础上，我们再去理解更加高妙的 BitmapFun 的缓存实现方案。</p>

<h2 id="oom">如何解决OOM</h2>

<p>Bitmap 之所以容易引起OOM异常，原因已经在 Bitmap 系列教程中说的明明白白。但是我们至少清楚一点：一个手机屏幕再大，合理尺寸的 Bitmap 也不至于耗空所有内存，那要怎么做才能避免 OOM 呢？</p>

<ul>
  <li>加载合理尺寸的 Bitmap </li>
  <li>避免反复解码、重复加载 Bitmap</li>
  <li>控制 Bitmap 的生命周期，合理回收</li>
</ul>

<p>此外网上也有不少歪门邪道，我个人认为是不可取的，使用这些简单粗暴的方法，后期会为你带来更大的麻烦：</p>

<ul>
  <li>减损图片质量（使用过高的 inSampleSize 值）</li>
  <li>使用 decodeStream （绕过 Java 层，直接调用 JNI ）</li>
  <li>强制增加heap size</li>
  <li>其他</li>
</ul>

<p>控制Bitmap的生命周期才是正解， BitmapFun 使用的 LruCache 是将它将最近被引用到的对象存储在一个强引用的 LinkedHashMap 中，并且在缓存超过了指定大小之后将最近不常使用的对象释放掉。</p>

<p>Memory Cache 的 Size 是受限的，因此加入 DiskLruCache ，虽然在访问速度上逊于 Memory Cache ，但是速度也是相当可观的。</p>

<p>借鉴 Google 的做法，我也将缓存做了两份，一份是 Memory Cache ，使用弱引用的 WeakHashMap 来控制 Bitmap 的生命周期，后面会有详细解释。另一份严格来说不能算是缓存，直接将文件存储在 SDCard 上，避免重复下载。</p>

<h2 id="section-3">佛说引用，既非引用，是名引用。</h2>

<p>关于引用，或许对于小菜鸟们不是很好理解（我碰到过太多 Java 都没学好来做 Android 的，基础很重要！）。我使用金刚经的著名三段论来解释它：<code>佛说XX，既非XX，是名XX。</code></p>

<p>这句话什么意思呢？比如佛说大米，既可以说它不是大米，只是名字叫做大米罢了。不会因为你为它改名叫做大麦而改变它的本质，你叫它做水，吃到嘴里的还是原来的味道。</p>

<p>关于引用，跟这个有着非常相似的共性。引用就相当于实际对象的名字，比如下面的例子：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Person</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
</span><span class="line"><span class="n">Person</span> <span class="n">p2</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class="line"><span class="n">p2</span> <span class="o">=</span> <span class="n">p1</span><span class="o">;</span>
</span><span class="line"><span class="n">p1</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p><code>new Person()</code>这个对象的名是 p1 ，而后你将名字改成了 p2 ，对象还是那个对象，不会因为你将 p1 的大名盖在 null 的头上而改变它的本质。以上的 p1 和 p2 都是引用，它们都不过是名。</p>

<blockquote>
  <p>在了解到引用的含义后，虚拟机会告诉你，被引用的对象处于可获得( reachable )状态，它是你的好管家，既然你要用它，它就不会回收它。（你想想如果你正在吃一只烤鸭，人家突然一把抢了过去扔垃圾桶了你什么感觉。）</p>
</blockquote>

<blockquote>
  <p>如果在上面的那段程序后面加上 <code>p2 = null</code>，Person 这个对象就没有任何引用指向它了，垃圾回收器会在不确定的时间进行回收。（你都把东西扔了，总不能不让人家收破烂吧？）</p>
</blockquote>

<blockquote>
  <p>如果你想继续持有这个对象的引用，希望可以继续访问，但是也允许垃圾回收器进行回收，该怎么办呢？（你想减肥，告诉你的好朋友说，如果察觉到你太胖了，就将你嘴里的烤鸭抢去扔了。如果你很饿，身材也不错，你要继续吃。）</p>
</blockquote>

<p>这个时候，我们需要借助 Java 提供的软/弱/虚引用。我们平时使用的如 p1 和 p2 这样的叫做强引用(Strong Reference)。要使垃圾回收器能在内存不够的时候，主动抢下你嘴里的烤鸭，进行回收，需要使用这些：</p>

<ul>
  <li>软引用：SoftReference</li>
  <li>弱引用：WeakReference</li>
  <li>虚引用：PhantomReference</li>
</ul>

<p>它们按照由强到弱的引用关系排列，虚引用相当于几乎没有引用。文艺青年常说的若即若离用来形容它再恰当不过了。</p>

<p>关于这三个引用的具体学习，详见我提供的参考资料。这里只是向你解释为什么使用弱引用可以起到防止 Bitmap 过多而导致内存紧张的作用。</p>

<p>在这里，由于我需要使用 Bitmap 和名字的 key-value 对应关系，我使用 Java 提供的 <code>WeakHashMap(String key, Bitmap value)</code> ，顾名思义，它用来保存 WeakReference ，并且确保每个 key 只对应一个值，在内存不够的时候，垃圾回收器会进行回收。当 key 值索引不到 Bitmap ，再进行其他的操作。</p>

<h2 id="section-4">原理示意图</h2>

<p>我将原理画成图，以便大家的理解。主体有三个，分别是 UI ，缓存模块和数据源。它们之间的关系如下：</p>

<p><img src="images/blog/android/130726_4p9B_245415.png" alt="原理示意图" /></p>

<p>① UI：请求数据，使用唯一的 Key 值索引 Memory Cache 中的 Bitmap 。</p>

<p>② 内存缓存：缓存搜索，如果能找到 Key 值对应的 Bitmap ，则返回数据。否则执行第三步。</p>

<p>③ 硬盘存储：使用唯一 Key 值对应的文件名，检索 SDCard 上的文件。</p>

<p>④ 如果有对应文件，使用 BitmapFactory.decode* 方法，解码 Bitmap 并返回数据，同时将数据写入缓存。如果没有对应文件，执行第五步。</p>

<p>⑤ 下载图片：启动异步线程，从数据源下载数据(Web)。</p>

<p>⑥ 若下载成功，将数据同时写入硬盘和缓存，并将 Bitmap 显示在 UI 中。</p>

<p>总结：这节课除了吐槽，主要的还是原理分析。如果你有更好的缓存方案，欢迎提出。下节课将讲解具体的 Memory Cache 和 FileCache 如何实现。</p>

<h2 id="section-5">参考资料</h2>

<p>【1】<a href="http://vdisk.weibo.com/s/jtqjr">Thinking In Java 4th Chapter 17.12 Hoding References.pdf</a></p>

<p>【2】<a href="http://vdisk.weibo.com/s/jtqjr">李刚：突破程序员基本功的16课之Java的内存回收.pdf</a>  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android大图片裁剪终极解决方案（下：拍照截图）]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/06/03/the-ultimate-approach-to-crop-photos-on-android-3/"/>
    <updated>2014-06-03T22:34:51+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/06/03/the-ultimate-approach-to-crop-photos-on-android-3</id>
    <content type="html"><![CDATA[<p>上一篇博客中，我们学习到了如何使用Android相册截图。在这篇博客中，我将向大家展示如何拍照截图。</p>

<p>拍照截图有点儿特殊，要知道，现在的Android智能手机的摄像头都是几百万的像素，拍出来的图片都是非常大的。因此，我们不能像对待相册截图一样使用Bitmap小图，无论大图小图都统一使用Uri进行操作。</p>

<h4 id="uri">一、首先准备好需要使用到的Uri：</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">IMAGE_FILE_LOCATION</span> <span class="o">=</span> <span class="s">&quot;file:///sdcard/temp.jpg&quot;</span><span class="o">;</span><span class="c1">//temp file</span>
</span><span class="line"><span class="n">Uri</span> <span class="n">imageUri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">IMAGE_FILE_LOCATION</span><span class="o">);</span><span class="c1">//The Uri to store the big bitmap</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="mediastoreactionimagecapturecamera">二、使用MediaStore.ACTION_IMAGE_CAPTURE可以轻松调用Camera程序进行拍照：</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">ACTION_IMAGE_CAPTURE</span><span class="o">);</span><span class="c1">//action is capture</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">EXTRA_OUTPUT</span><span class="o">,</span> <span class="n">imageUri</span><span class="o">);</span>
</span><span class="line"><span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">TAKE_BIG_PICTURE</span><span class="o">);</span><span class="c1">//or TAKE_SMALL_PICTURE</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="onactivityresulturiuri">三、接下来就可以在 onActivityResult中拿到返回的数据（Uri），并将Uri传递给截图的程序。</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">switch</span> <span class="o">(</span><span class="n">requestCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line"><span class="k">case</span> <span class="nl">TAKE_BIG_PICTURE:</span>
</span><span class="line">	<span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TAKE_BIG_PICTURE: data = &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span><span class="c1">//it seems to be null</span>
</span><span class="line">	<span class="c1">//TODO sent to crop</span>
</span><span class="line">	<span class="n">cropImageUri</span><span class="o">(</span><span class="n">imageUri</span><span class="o">,</span> <span class="mi">800</span><span class="o">,</span> <span class="mi">400</span><span class="o">,</span> <span class="n">CROP_BIG_PICTURE</span><span class="o">);</span>
</span><span class="line">	
</span><span class="line">	<span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="k">case</span> <span class="nl">TAKE_SMALL_PICTURE:</span>
</span><span class="line">	<span class="n">Log</span><span class="o">.</span><span class="na">i</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;TAKE_SMALL_PICTURE: data = &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span>
</span><span class="line">	<span class="c1">//TODO sent to crop </span>
</span><span class="line">	<span class="n">cropImageUri</span><span class="o">(</span><span class="n">imageUri</span><span class="o">,</span> <span class="mi">300</span><span class="o">,</span> <span class="mi">150</span><span class="o">,</span> <span class="n">CROP_SMALL_PICTURE</span><span class="o">);</span>
</span><span class="line">	
</span><span class="line">	<span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可以看到，无论是拍大图片还是小图片，都是使用的Uri，只是尺寸不同而已。我们将这个操作封装在一个方法里面。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">private</span> <span class="kt">void</span> <span class="nf">cropImageUri</span><span class="o">(</span><span class="n">Uri</span> <span class="n">uri</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outputX</span><span class="o">,</span> <span class="kt">int</span> <span class="n">outputY</span><span class="o">,</span> <span class="kt">int</span> <span class="n">requestCode</span><span class="o">){</span>
</span><span class="line">	<span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="s">&quot;com.android.camera.action.CROP&quot;</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">setDataAndType</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="s">&quot;image/*&quot;</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;crop&quot;</span><span class="o">,</span> <span class="s">&quot;true&quot;</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;aspectX&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;aspectY&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputX&quot;</span><span class="o">,</span> <span class="n">outputX</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputY&quot;</span><span class="o">,</span> <span class="n">outputY</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;scale&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">EXTRA_OUTPUT</span><span class="o">,</span> <span class="n">uri</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;return-data&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputFormat&quot;</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line">	<span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;noFaceDetection&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// no face detection</span>
</span><span class="line">	<span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">requestCode</span><span class="o">);</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section">四、最后一步，我们已经将数据传入裁剪图片程序，接下来要做的就是处理返回的数据了：</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">switch</span> <span class="o">(</span><span class="n">requestCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line"><span class="k">case</span> <span class="nl">CROP_BIG_PICTURE:</span><span class="c1">//from crop_big_picture</span>
</span><span class="line">	<span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;CROP_BIG_PICTURE: data = &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span><span class="c1">//it seems to be null</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">imageUri</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">		<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">decodeUriAsBitmap</span><span class="o">(</span><span class="n">imageUri</span><span class="o">);</span>
</span><span class="line">		<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	<span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="k">case</span> <span class="nl">CROP_SMALL_PICTURE:</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">imageUri</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">		<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">decodeUriAsBitmap</span><span class="o">(</span><span class="n">imageUri</span><span class="o">);</span>
</span><span class="line">		<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">		<span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;CROP_SMALL_PICTURE: data = &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line">	<span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="k">default</span><span class="o">:</span>
</span><span class="line">	<span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">效果图：</h4>

<p><img src="images/blog/android/184229_tlMc_245415.gif" alt="截图演示" /></p>

<blockquote>
  <p>代码托管于GitHub，会不定期更新：<a href="https://github.com/ryanhoo/PhotoCropper">https://github.com/ryanhoo/PhotoCropper</a></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android大图片裁剪终极解决方案（中：从相册截图）]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/06/03/the-ultimate-approach-to-crop-photos-on-android-2/"/>
    <updated>2014-06-03T22:21:35+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/06/03/the-ultimate-approach-to-crop-photos-on-android-2</id>
    <content type="html"><![CDATA[<p>在这篇博客中，我将向大家展示如何从相册截图。</p>

<p>上一篇博客中，我就拍照截图这一需求进行了详细的分析，试图让大家了解 Android 本身的限制，以及我们应当采取的实现方案。</p>

<p>根据我们的分析与总结，图片的来源有拍照和相册，而可采取的操作有</p>

<ul>
  <li>使用Bitmap并返回数据</li>
  <li>使用Uri不返回数据</li>
</ul>

<p>前面我们了解到，使用Bitmap有可能会导致图片过大，而不能返回实际大小的图片，我将采用大图Uri，小图Bitmap的数据存储方式。</p>

<p>我们将要使用到URI来保存拍照后的图片：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">IMAGE_FILE_LOCATION</span> <span class="o">=</span> <span class="s">&quot;file:///sdcard/temp.jpg&quot;</span><span class="o">;</span><span class="c1">//temp file</span>
</span><span class="line"><span class="n">Uri</span> <span class="n">imageUri</span> <span class="o">=</span> <span class="n">Uri</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">IMAGE_FILE_LOCATION</span><span class="o">);</span><span class="c1">//The Uri to store the big bitmap</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>不难知道，我们从相册选取图片的<strong>Action</strong>为<code>Intent.ACTION_GET_CONTENT</code>。</p>

<p>根据我们上一篇博客的分析，我准备好了两个实例的Intent。</p>

<h4 id="section">一、从相册截大图：</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_GET_CONTENT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="s">&quot;image/*&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;crop&quot;</span><span class="o">,</span> <span class="s">&quot;true&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;aspectX&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;aspectY&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputX&quot;</span><span class="o">,</span> <span class="mi">600</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputY&quot;</span><span class="o">,</span> <span class="mi">300</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;scale&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;return-data&quot;</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="n">MediaStore</span><span class="o">.</span><span class="na">EXTRA_OUTPUT</span><span class="o">,</span> <span class="n">imageUri</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputFormat&quot;</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;noFaceDetection&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// no face detection</span>
</span><span class="line"><span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">CHOOSE_BIG_PICTURE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-1">二、从相册截小图</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Intent</span> <span class="n">intent</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">Intent</span><span class="o">.</span><span class="na">ACTION_GET_CONTENT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">setType</span><span class="o">(</span><span class="s">&quot;image/*&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;crop&quot;</span><span class="o">,</span> <span class="s">&quot;true&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;aspectX&quot;</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;aspectY&quot;</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputX&quot;</span><span class="o">,</span> <span class="mi">200</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputY&quot;</span><span class="o">,</span> <span class="mi">100</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;scale&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;return-data&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputFormat&quot;</span><span class="o">,</span> <span class="n">Bitmap</span><span class="o">.</span><span class="na">CompressFormat</span><span class="o">.</span><span class="na">JPEG</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;noFaceDetection&quot;</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span> <span class="c1">// no face detection</span>
</span><span class="line"><span class="n">startActivityForResult</span><span class="o">(</span><span class="n">intent</span><span class="o">,</span> <span class="n">CHOOSE_SMALL_PICTURE</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="onactivityresult">三、对应的onActivityResult可以这样处理返回的数据</h4>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="k">switch</span> <span class="o">(</span><span class="n">requestCode</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line"><span class="k">case</span> <span class="nl">CHOOSE_BIG_PICTURE:</span>
</span><span class="line">	<span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;CHOOSE_BIG_PICTURE: data = &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span><span class="c1">//it seems to be null</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">imageUri</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">		<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">decodeUriAsBitmap</span><span class="o">(</span><span class="n">imageUri</span><span class="o">);</span><span class="c1">//decode bitmap</span>
</span><span class="line">		<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="k">case</span> <span class="nl">CHOOSE_SMALL_PICTURE:</span>
</span><span class="line">	<span class="k">if</span><span class="o">(</span><span class="n">data</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class="line">		<span class="n">Bitmap</span> <span class="n">bitmap</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="s">&quot;data&quot;</span><span class="o">);</span>
</span><span class="line">		<span class="n">imageView</span><span class="o">.</span><span class="na">setImageBitmap</span><span class="o">(</span><span class="n">bitmap</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span><span class="k">else</span><span class="o">{</span>
</span><span class="line">		<span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;CHOOSE_SMALL_PICTURE: data = &quot;</span> <span class="o">+</span> <span class="n">data</span><span class="o">);</span>
</span><span class="line">	<span class="o">}</span>
</span><span class="line"><span class="k">break</span><span class="o">;</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">效果图</h4>

<p><img src="http://ryanhoo.github.io/images/blog/android/183645_yuLJ_245415.gif" alt="大图" /></p>

<p><img src="http://ryanhoo.github.io/images/blog/android/183707_DnNy_245415.gif" alt="小图" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android大图片裁剪终极解决方案（上：原理分析）]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/05/26/the-ultimate-approach-to-crop-photos-on-android-1/"/>
    <updated>2014-05-26T17:37:42+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/05/26/the-ultimate-approach-to-crop-photos-on-android-1</id>
    <content type="html"><![CDATA[
<p>约几个月前，我正为公司的APP在Android手机上实现拍照截图而烦恼不已。</p>

<p>上网搜索，确实有不少的例子，大多都是抄来抄去，而且水平多半处于demo的样子，可以用来讲解知识点，但是一碰到实际项目，就漏洞百出。</p>

<p>当时我用大众化的解决方案，暂时性的做了一个拍照截图的功能，似乎看起来很不错。可是问题随之而来，我用的是小米手机，在别的手机上都运行正常，在小米这里却总是碰钉子。虽然我是个理性的米粉，但是也暗地里把小米的工程师问候了个遍。真是惭愧！</p>

<p>翻文档也找不出个答案来，我一直对<strong>com.android.camera.action.CROP</strong>持有大大的疑问，它是从哪里来，它能干什么，它接收处理什么类型的数据？Google对此却讳莫如深，在官方文档中只有Intent中有只言片语言及，却不甚详尽。</p>

<p>随着项目的驱动，我不能抱着不了解原理就不往前走的心态，唯一要做的，是解决问题。最后在德问上找到一条解决方案，说是哪怕是大米也没问题。当时乐呵呵将代码改了改，确实在所有的手机上跑起来了，一时如释重负，对这个的疑问也抛诸脑后了。</p>

<p>直到月前，BOSS要求将拍照上传到服务器的图片分辨率加倍。OK，加倍简单，增加<code>outputX</code>以及<code>outputY</code>不就得了？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputX&quot;</span><span class="o">,</span> <span class="n">outputX</span><span class="o">);</span>
</span><span class="line"><span class="n">intent</span><span class="o">.</span><span class="na">putExtra</span><span class="o">(</span><span class="s">&quot;outputY&quot;</span><span class="o">,</span> <span class="n">outputY</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这一增加，吓了我一跳。BOSS的手机拍到的照片几乎就是个缩略图，但是被我问候了全体工程师的小米在这个时候就体现出国产神机的范儿了，小米上的尺寸一切正常。这个为什么呢？我大致了解原因，却不知道如何解决。</p>

<p>在Android中，Intent触发Camera程序，拍好照片后，将会返回数据，但是考虑到内存问题，Camera不会将全尺寸的图像返回给调用的Activity，一般情况下，有可能返回的是缩略图，比如<strong>120*160px</strong>。</p>

<p>这是为什么呢？这不是一个Bug，而是经过精心设计的，却对开发者不透明。</p>

<p>以我的小米手机为例，摄像头800W像素，根据我目前设置拍出来的图片尺寸为<strong>3200*2400px</strong>。有人说，那就返回呗，大不了耗1-2M的内存，不错，这个尺寸的图片确实只有1.8M左右的大小。但是你想不到的是，这个尺寸对应的Bitmap会耗光你应用程序的所有内存。Android出于安全性考虑，只会给你一个寒碜的缩略图。</p>

<p>在Android2.3中，默认的Bitmap为32位，类型是<code>ARGB_8888</code>，也就意味着一个像素点占用4个字节的内存。我们来做一个简单的计算题：</p>

<p><code>3200*2400*4 bytes =   30M</code></p>

<p>如此惊人的数字！哪怕你愿意为一张生命周期超不过10s的位图愿意耗费这么巨大的内存，Android也不会答应的。</p>

<blockquote>
  <p>Mobile devices typically have constrained system resources. 
Android devices can have as little as 16MB of memory available to a single application.</p>
</blockquote>

<p>这是Android Doc的原文，虽然不同手机系统的厂商可能围绕16M这个数字有微微的上调，但是这30M，一般的手机还真挥霍不起。也只有小米这种牛机，内存堪比个人PC，本着土财主般挥金如土的霸气才能做到。</p>

<p>OK，说了这么多，无非是吐吐苦水，爆爆个人经历而已，实际的解决方案在哪里呢？</p>

<p>我也是Google到的，话说一般百度不了的问题，那就<code>Google</code>或者直接<code>StackOverFlow</code>，只不过得看英文罢了。</p>

<p>最后翻来覆去，我在国外的一个Android团队的博客中找到了相应的方案，印证了我的猜想同时也给出了实际的代码。</p>

<p>我将这篇文章翻译成了中文，作为本博客的基础，建议详细看看。</p>

<p><a href="http://my.oschina.net/ryanhoo/blog/86843">【译】如何使用Android MediaStore裁剪大图片</a></p>

<p>这篇博客了不起的地方在于解决了Android对返回图片的大小限制，并且详细解释了裁剪图片的<code>Intent</code>附加数据的具体含义。我只是站在巨人的肩膀上，改善方案，适应更广泛需求而已。</p>

<p>拿图说事儿：</p>

<p><img src="http://ryanhoo.github.io/images/blog/android/144805_wCcI_245415.png" alt="Intent Options" /></p>

<p><code>Intent("com.android.camera.action.CROP")</code>对应的所有可选数据都一目了然。在了解上面个个选项的含义之后，我们将目光着眼于三个极为重要的选项：</p>

<ul>
  <li>data</li>
  <li>MediaStore.EXTRA_OUTPUT</li>
  <li>return-data</li>
</ul>

<p><code>data和MediaStore.EXTRA_OUTPUT</code>都是可选的传入数据选项，你可以选择设置data为Bitmap，或者将相应的数据与URI关联起来，你也可以选择是否返回数据（return-data: true）。</p>

<p>为什么还有不用返回数据的选项？如果对URI足够了解的话，应该知道URI与File相似，你所有的操作如裁剪将数据都保存在了URI中，你已经持有了相应的URI，也就无需多此一举，再返回Bitmap了。</p>

<p>前面已经说到，可以设置data为Bitmap，但是这种操作的限制在于，你的Bitmap不能太大。因此，我们前进的思路似乎明确了：截大图用URI，小图用Bitmap。</p>

<p>我将这个思路整理成一张图片：</p>

<p><img src="http://ryanhoo.github.io/images/blog/android/151831_7gRC_245415.png" alt="idea" /></p>

<p>这篇主要让大家了解需求的来源，以及如何去思考分析并解决问题。下一篇博客将介绍具体的操作。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【译】Android：更好的自定义字体方法]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/05/05/android-better-way-to-apply-custom-font/"/>
    <updated>2014-05-05T17:48:26+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/05/05/android-better-way-to-apply-custom-font</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">情景</a></li>
  <li><a href="#section-1">解决方案</a>    <ul>
      <li><a href="#android-1">1）Android默认方法 #1</a></li>
      <li><a href="#android-2">2）Android默认方法 #2</a></li>
      <li><a href="#section-2">3）我的解决方案</a></li>
    </ul>
  </li>
  <li><a href="#section-3">译者注</a></li>
  <li><a href="#section-4">参考</a></li>
</ul>

<blockquote>
  <p>原文：<a href="http://vision-apps.blogspot.hk/2012/02/android-better-way-to-apply-custom-font.html">http://vision-apps.blogspot.hk/2012/02/android-better-way-to-apply-custom-font.html</a></p>
</blockquote>

<p>在一个应用中，我需要在所有的UI组件中使用客户提供的字体。这听起来似乎是个很稀松平常的任务，不是吗？是的，我当时也是这么想的。然后我震惊了，Android竟然没有提供一个简单优雅的方式来做这件事情!</p>

<p>所以，在这篇文章中我会展示Android提供的默认方法，然后我会分享更加简单优雅的解决方案。</p>

<h3 id="section">情景</h3>

<p>你需要为整个应用替换自定义字体。</p>

<h3 id="section-1">解决方案</h3>

<h4 id="android-1">1）Android默认方法 #1</h4>

<p>你可以通过ID查找到View，然后挨个为它们设置字体。在单个View的情况下，它看起来也没有那么可怕。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="n">Typeface</span> <span class="n">customFont</span> <span class="o">=</span> <span class="n">Typeface</span><span class="o">.</span><span class="na">createFromAsset</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getAssets</span><span class="o">(),</span> <span class="s">&quot;fonts/YourCustomFont.ttf&quot;</span><span class="o">);</span>
</span><span class="line"><span class="n">TextView</span> <span class="n">view</span> <span class="o">=</span> <span class="o">(</span><span class="n">TextView</span><span class="o">)</span> <span class="n">findViewById</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">activity_main_header</span><span class="o">);</span>
</span><span class="line"><span class="n">view</span><span class="o">.</span><span class="na">setTypeface</span><span class="o">(</span><span class="n">customFont</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是在很多TextView、Button等文本组件的情况下，我敢肯定你不会喜欢这个方法的。:D</p>

<h4 id="android-2">2）Android默认方法 #2</h4>

<p>你可以为每个文本组件创建一个子类，如TextView、Button等，然后在构造函数中加载自定义字体。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BrandTextView</span> <span class="kd">extends</span> <span class="n">TextView</span> <span class="o">{</span>
</span><span class="line">
</span><span class="line">      <span class="kd">public</span> <span class="nf">BrandTextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">,</span> <span class="kt">int</span> <span class="n">defStyle</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">,</span> <span class="n">defStyle</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">     <span class="kd">public</span> <span class="nf">BrandTextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">AttributeSet</span> <span class="n">attrs</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">attrs</span><span class="o">);</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line">     <span class="kd">public</span> <span class="nf">BrandTextView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">          <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class="line">     <span class="o">}</span>
</span><span class="line">     <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTypeface</span><span class="o">(</span><span class="n">Typeface</span> <span class="n">tf</span><span class="o">,</span> <span class="kt">int</span> <span class="n">style</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">           <span class="k">if</span> <span class="o">(</span><span class="n">style</span> <span class="o">==</span> <span class="n">Typeface</span><span class="o">.</span><span class="na">BOLD</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">                <span class="kd">super</span><span class="o">.</span><span class="na">setTypeface</span><span class="o">(</span><span class="n">Typeface</span><span class="o">.</span><span class="na">createFromAsset</span><span class="o">(</span><span class="n">getContext</span><span class="o">().</span><span class="na">getAssets</span><span class="o">(),</span> <span class="s">&quot;fonts/YourCustomFont_Bold.ttf&quot;</span><span class="o">));</span>
</span><span class="line">            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class="line">               <span class="kd">super</span><span class="o">.</span><span class="na">setTypeface</span><span class="o">(</span><span class="n">Typeface</span><span class="o">.</span><span class="na">createFromAsset</span><span class="o">(</span><span class="n">getContext</span><span class="o">().</span><span class="na">getAssets</span><span class="o">(),</span> <span class="s">&quot;fonts/YourCustomFont.ttf&quot;</span><span class="o">));</span>
</span><span class="line">            <span class="o">}</span>
</span><span class="line">      <span class="o">}</span>
</span><span class="line"> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后只需要将标准的文本控件替换成你自定义的就可以了（例如BrandTextView替换TextView）。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line"><span class="nt">&lt;com.your.package.BrandTextView</span>
</span><span class="line">         <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class="line">         <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class="line">         <span class="na">android:text=</span><span class="s">&quot;View with custom font&quot;</span><span class="nt">/&gt;</span>
</span><span class="line"><span class="nt">&lt;com.your.package.BrandTextView</span>
</span><span class="line">         <span class="na">android:layout_width=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class="line">         <span class="na">android:layout_height=</span><span class="s">&quot;wrap_content&quot;</span>
</span><span class="line">         <span class="na">android:textStyle=</span><span class="s">&quot;bold&quot;</span>
</span><span class="line">         <span class="na">android:text=</span><span class="s">&quot;View with custom font and bold typeface&quot;</span><span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>还有，你甚至可以直接在XML中添加自定义的字体属性。要实现这个，你需要定义你自己的<code>declare-styleable</code>属性，然后在组件的构造函数中解析它们。</p>

<p>为了不占篇幅介绍这么基础的东西，这里有一篇不错的文章告诉你怎么自定义控件属性。</p>

<blockquote>
  <p><a href="http://kevindion.com/2011/01/custom-xml-attributes-for-android-widgets/">http://kevindion.com/2011/01/custom-xml-attributes-for-android-widgets/</a></p>
</blockquote>

<p>在大多数情况下，这个方法还不赖，并且有一些优点（例如，切换字体粗细等等，字体可以在组件xml文件的typeface属性中定义）。但是我认为这个实现方法还是太重量级了，并且依赖大量的模板代码，为了一个替换字体的简单任务，有点儿得不偿失。</p>

<h4 id="section-2">3）我的解决方案</h4>

<p>理想的解决方案是自定义主题，然后应用到全局或者某个Activity。
但不幸的是，Android的<code>android:typeface</code>属性只能用来设置系统内嵌的字体，而非用户自定义字体(例如assets文件中的字体)。这就是为什么我们无法避免在Java代码中加载并设置字体。</p>

<p>所以我决定创建一个帮助类，使得这个操作尽可能的简单。使用方法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="xml"><span class="line">FontHelper.applyFont(context, findViewById(R.id.activity_root), &quot;fonts/YourCustomFont.ttf&quot;);
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>并且这行代码会用来加载所有的基于TextView的文本组件（TextView、Button、RadioButton、ToggleButton等等），而无需考虑界面的布局层级如何。</p>

<p><img src="http://ryanhoo.github.io/images/blog/2014-05-05-before and after.png" alt="标准(左)与自定义(右)字体的用法。" /></p>

<p>这是怎么做到的？非常简单：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">applyFont</span><span class="o">(</span><span class="kd">final</span> <span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="kd">final</span> <span class="n">View</span> <span class="n">root</span><span class="o">,</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">fontName</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">    <span class="k">try</span> <span class="o">{</span>
</span><span class="line">        <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="k">instanceof</span> <span class="n">ViewGroup</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">            <span class="n">ViewGroup</span> <span class="n">viewGroup</span> <span class="o">=</span> <span class="o">(</span><span class="n">ViewGroup</span><span class="o">)</span> <span class="n">root</span><span class="o">;</span>
</span><span class="line">            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">viewGroup</span><span class="o">.</span><span class="na">getChildCount</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span>
</span><span class="line">                <span class="n">applyFont</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">viewGroup</span><span class="o">.</span><span class="na">getChildAt</span><span class="o">(</span><span class="n">i</span><span class="o">),</span> <span class="n">fontName</span><span class="o">);</span>
</span><span class="line">        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">root</span> <span class="k">instanceof</span> <span class="n">TextView</span><span class="o">)</span>
</span><span class="line">            <span class="o">((</span><span class="n">TextView</span><span class="o">)</span> <span class="n">root</span><span class="o">).</span><span class="na">setTypeface</span><span class="o">(</span><span class="n">Typeface</span><span class="o">.</span><span class="na">createFromAsset</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getAssets</span><span class="o">(),</span> <span class="n">fontName</span><span class="o">));</span>
</span><span class="line">    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class="line">        <span class="n">Log</span><span class="o">.</span><span class="na">e</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">&quot;Error occured when trying to apply %s font for %s view&quot;</span><span class="o">,</span> <span class="n">fontName</span><span class="o">,</span> <span class="n">root</span><span class="o">));</span>
</span><span class="line">        <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class="line">    <span class="o">}</span>
</span><span class="line"><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>正如你所看到的，所需要做的仅仅是将基于TextView的文本组件从布局中遍历出来而已。</p>

<p>你可以在这里下载到示例代码，里面有<a href="http://db.tt/i9S80Mgr"><code>FontHelper</code></a>的具体用法。</p>

<h3 id="section-3">译者注</h3>

<p>在多个项目中，我都碰到过类似的需求，早期采用的是第二种实现方法，但是缺点在于对于第三方组件，你需要去修改别人的代码，才能实现自定义字体，这恰恰违反了OC（Open &amp; Close）原则，对扩展开放，对修改封闭。</p>

<p>刚看到第三种的时候，也是惊为天人，姑且不说结果，我觉得这种活跃的思路非常重要，很值得学习参考。</p>

<p>但是最后被team里的人否决了，理由是违背组件设计原则，实现方式略嫌粗暴。后来我仔细想想，一个是要做好内存管理（似乎会引起内存问题），视图状态改变，也要重复加载（横竖屏、onResume等），也绝对不是简单的活儿。</p>

<p>所以暂定使用第一种方法，typeface使用单例，需要时设置字体。</p>

<p>我个人觉得第一种还是个体力活，而且到后来，这个代码重复率还是非常高的，这又违背了DRY原则。</p>

<p>在地铁上的时候，突然想到DI（Dependency Inject）。已经有一些DI的框架，如ButterKnife，那写出来应该是这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@CustomFont</span><span class="o">(</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">)</span> <span class="n">TextView</span> <span class="n">textView</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>or</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="java"><span class="line"><span class="nd">@InjectView</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">,</span> <span class="n">customFont</span><span class="o">=</span><span class="kc">true</span><span class="o">)</span> <span class="n">View</span> <span class="n">anyView</span>
</span><span class="line"><span class="nd">@InjectView</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="n">R</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">textView</span><span class="o">,</span> <span class="n">customFont</span><span class="o">=</span><span class="kc">true</span><span class="o">,</span> <span class="n">font</span><span class="o">=</span><span class="s">&quot;fonts/ltfz.ttf&quot;</span><span class="o">)</span> <span class="n">View</span> <span class="n">anyView</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这样写出来代码相比重复写setTypeface要好一些。</p>

<p>目前我们的项目还没有使用这类DI框架，等以后引入了，使用第二种注入，写起来应该是很爽的。</p>

<p>保持更新。</p>

<h3 id="section-4">参考</h3>

<ul>
  <li><a href="http://www.javacodegeeks.com/2014/02/dependency-injection-options-for-java.html">DI框架</a></li>
  <li><a href="http://stormzhang.github.io/openandroid/android/2014/01/12/android-butterknife/">ButterKnife</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress搭建自己的博客]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/04/28/build-your-own-blog-with-octopress/"/>
    <updated>2014-04-28T22:07:27+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/04/28/build-your-own-blog-with-octopress</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#step-1-octopress">Step 1: 安装Octopress</a></li>
  <li><a href="#step-2-">Step 2: 配置</a></li>
  <li><a href="#step-3-github-pages">Step 3: 设置github pages</a></li>
  <li><a href="#step-4-">Step 4: 编译、预览与发布</a></li>
  <li><a href="#step-5--octopress">Step 5: 更新 Octopress</a></li>
  <li><a href="#section">参考</a></li>
</ul>

<p>一直想搭建一个自己的博客，开始付诸行动！</p>

<p>刚刚接触到Octopress，总体感觉还是不错的，但是它不像segmentfault、oschina之类的平台，什么都具备，很多东西默认没有，需要自己配置，不过在玩的过程中总是能学到新东西的。</p>

<h2 id="step-1-octopress">Step 1: 安装Octopress</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git clone git://github.com/imathis/octopress.git octopress
</span><span class="line">cd octopress
</span><span class="line">bundle update    # 安装依赖的组件
</span><span class="line">rake install     # 安装默认的Octopress主题</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-2-">Step 2: 配置</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git remote rm origin
</span><span class="line">git remote add origin git@github.com:ryanhoo/ryanhoo.github.com.git
</span><span class="line">git remote add octopress git://github.com/imathis/octopress.git  # 为了octopress的升级而添加</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-3-github-pages">Step 3: 设置github pages</h2>

<p>在github上创建一个仓库，注意仓库名称要以下这种格式yourname.github.com，这样代码发布后自动这个url就可以访问了（此处一定要注意哦，我刚开始没注意，死活没得到想要的效果）。 例如你的 GitHub 帐号是 jack 就将 Repository 命名为 jack.github.com， 完成后会得到一组 GitHub Pages URL http://yourname.github.com/ (注意不能用 https协议，必须用 http协议)。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake setup_github_pages</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-4-">Step 4: 编译、预览与发布</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">rake generate  			# 生成网页
</span><span class="line">rake preview   			# 预览
</span><span class="line">rake deploy    			# 发布
</span><span class="line">rake gen_deploy 		# 相当于生成+发布
</span><span class="line">rake new_page["name"] 	# 创建新页面
</span><span class="line">rake new_post["name"]	# 新建博文</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="step-5--octopress">Step 5: 更新 Octopress</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git remote add octopress git://github.com/imathis/octopress.git
</span><span class="line">git pull octopress master     # Get the latest Octopress
</span><span class="line">bundle install                # Keep gems updated
</span><span class="line">rake update_source            # update the template's source
</span><span class="line">rake update_style             # update the template's style</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">参考</h2>

<ul>
  <li><a href="https://github.com/shashankmehta/greyshade">主题配置</a></li>
  <li><a href="http://imallen.com/blog/2013/05/12/add-support-for-weibo-and-dribbble-to-greyshade.html">增加新浪微博链接</a></li>
  <li><a href="http://docs.shopify.com/themes/liquid-basics">Liquid Basics</a></li>
  <li><a href="http://khaos.github.io/blog/2012/12/05/generating-toc-in-octopress/">添加目录</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
