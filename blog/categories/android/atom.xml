<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Android | Ryan Hoo]]></title>
  <link href="http://ryanhoo.github.io/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://ryanhoo.github.io/"/>
  <updated>2014-05-05T20:54:31+08:00</updated>
  <id>http://ryanhoo.github.io/</id>
  <author>
    <name><![CDATA[Ryan Hoo]]></name>
    <email><![CDATA[ryan.hoo.j@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【译】Android：更好的自定义字体方法]]></title>
    <link href="http://ryanhoo.github.io/blog/2014/05/05/android-better-way-to-apply-custom-font/"/>
    <updated>2014-05-05T17:48:26+08:00</updated>
    <id>http://ryanhoo.github.io/blog/2014/05/05/android-better-way-to-apply-custom-font</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section">情景</a></li>
  <li><a href="#section-1">解决方案</a>    <ul>
      <li><a href="#android-1">1）Android默认方法 #1：</a></li>
      <li><a href="#android-2">2）Android默认方法 #2：</a></li>
      <li><a href="#section-2">3) 我的解决方案：</a></li>
    </ul>
  </li>
</ul>

<blockquote>
  <p>原文：<a href="http://vision-apps.blogspot.hk/2012/02/android-better-way-to-apply-custom-font.html">http://vision-apps.blogspot.hk/2012/02/android-better-way-to-apply-custom-font.html</a></p>
</blockquote>

<p>在一个应用中，我需要在所有的UI组件中使用客户提供的字体。这听起来似乎是个很稀松平常的任务，不是吗？是的，我当时也是这么想的。然后我震惊了，Android竟然没有提供一个简单优雅的方式来做这件事情!</p>

<p>所以，在这篇文章中我会展示Android提供的默认方法，然后我会分享更加简单优雅的解决方案。</p>

<h3 id="section">情景</h3>

<p>你需要为整个应用替换自定义字体。</p>

<h3 id="section-1">解决方案</h3>

<h4 id="android-1">1）Android默认方法 #1：</h4>

<p>你可以通过ID查找到View，然后挨个为它们设置字体。在单个View的情况下，它看起来也没有那么可怕。</p>

<p><code>java
Typeface customFont = Typeface.createFromAsset(this.getAssets(), "fonts/YourCustomFont.ttf");
TextView view = (TextView) findViewById(R.id.activity_main_header);
view.setTypeface(customFont);
</code></p>

<p>但是在很多TextView、Button等文本组件的情况下，我敢肯定你不会喜欢这个方法的。:D</p>

<h4 id="android-2">2）Android默认方法 #2：</h4>

<p>你可以为每个文本组件创建一个子类，如TextView、Button等，然后在构造函数中加载自定义字体。</p>

<p>```java
public class BrandTextView extends TextView {</p>

<pre><code>  public BrandTextView(Context context, AttributeSet attrs, int defStyle) {
      super(context, attrs, defStyle);
  }
 public BrandTextView(Context context, AttributeSet attrs) {
      super(context, attrs);
  }
 public BrandTextView(Context context) {
      super(context);
 }
 public void setTypeface(Typeface tf, int style) {
       if (style == Typeface.BOLD) {
            super.setTypeface(Typeface.createFromAsset(getContext().getAssets(), "fonts/YourCustomFont_Bold.ttf"));
        } else {
           super.setTypeface(Typeface.createFromAsset(getContext().getAssets(), "fonts/YourCustomFont.ttf"));
        }
  }  } ```
</code></pre>

<p>然后只需要将标准的文本控件替换成你自定义的就可以了（例如BrandTextView替换TextView）。</p>

<p><code>xml
&lt;com.your.package.BrandTextView
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:text="View with custom font"/&gt;
&lt;com.your.package.BrandTextView
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
         android:textStyle="bold"
         android:text="View with custom font and bold typeface"/&gt;
</code></p>

<p>还有，你甚至可以直接在XML中添加自定义的字体属性。要实现这个，你需要定义你自己的<code>declare-styleable</code>属性，然后在组件的构造函数中解析它们。</p>

<p>为了不占篇幅介绍这么基础的东西，这里有一篇不错的文章告诉你怎么自定义控件属性。</p>

<blockquote>
  <p><a href="http://kevindion.com/2011/01/custom-xml-attributes-for-android-widgets/">http://kevindion.com/2011/01/custom-xml-attributes-for-android-widgets/</a></p>
</blockquote>

<p>在大多数情况下，这个方法还不赖，并且有一些优点（例如，切换字体粗细等等，字体可以在组件xml文件的typeface属性中定义）。但是我认为这个实现方法还是太重量级了，并且依赖大量的模板代码，为了一个替换字体的简单任务，有点儿得不偿失。</p>

<h4 id="section-2">3) 我的解决方案：</h4>

<p>理想的解决方案是自定义主题，然后应用到全局或者某个Activity。
但不幸的是，Android的<code>android:typeface</code>属性只能用来设置系统内嵌的字体，而非用户自定义字体(例如assets文件中的字体)。这就是为什么我们无法避免在Java代码中加载并设置字体。</p>

<p>所以我决定创建一个帮助类，使得这个操作尽可能的简单。使用方法：</p>

<p><code>
FontHelper.applyFont(context, findViewById(R.id.activity_root), "fonts/YourCustomFont.ttf");
</code></p>

<p>并且这行代码会用来加载所有的基于TextView的文本组件（TextView、Button、RadioButton、ToggleButton等等），而无需考虑界面的布局层级如何。</p>

<p>标准(左)与自定义(右)字体的用法。
<img src="http://1.bp.blogspot.com/-AYEjPw_05f4/T0uZyHZXwaI/AAAAAAAAAHk/PFjf0jEmvrs/s640/before+and+after.png" alt="Standard (left) and Custom (right) fonts usage." /></p>

<p>这是怎么做到的？非常简单：</p>

<p><code>java
public static void applyFont(final Context context, final View root, final String fontName) {
    try {
        if (root instanceof ViewGroup) {
            ViewGroup viewGroup = (ViewGroup) root;
            for (int i = 0; i &lt; viewGroup.getChildCount(); i++)
                applyFont(context, viewGroup.getChildAt(i), fontName);
        } else if (root instanceof TextView)
            ((TextView) root).setTypeface(Typeface.createFromAsset(context.getAssets(), fontName));
    } catch (Exception e) {
        Log.e(TAG, String.format("Error occured when trying to apply %s font for %s view", fontName, root));
        e.printStackTrace();
    }
}
</code></p>

<p>正如你所看到的，所需要做的仅仅是将基于TextView的文本组件从布局中遍历出来而已。</p>

<p>你可以在这里下载到示例代码，里面有<a href="http://db.tt/i9S80Mgr"><code>FontHelper</code></a>的具体用法。</p>

]]></content>
  </entry>
  
</feed>
